/*
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.model.RouteReport;
import com.ptvgroup.developer.client.routeoptimization.model.Stop;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.routeoptimization.ApiClient;
/**
 * A route contains a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop can be assigned to a trip. A route is subdivided into trips. Each route has at least one trip and a trip consists of at least two stops. At the beginning and end of each trip the vehicle does not carry any load. A trip starts at the vehicle start location or at a depot location, and ends at the vehicle end location or at a depot location.   See [here](./concepts/routes-and-trips) for more information.
 */
@JsonPropertyOrder({
  Route.JSON_PROPERTY_VEHICLE_ID,
  Route.JSON_PROPERTY_STOPS,
  Route.JSON_PROPERTY_REPORT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:50:35.495306091Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class Route {
  public static final String JSON_PROPERTY_VEHICLE_ID = "vehicleId";
  private String vehicleId;

  public static final String JSON_PROPERTY_STOPS = "stops";
  private List<Stop> stops;

  public static final String JSON_PROPERTY_REPORT = "report";
  private RouteReport report;

  public Route() { 
  }

  @JsonCreator
  public Route(
    @JsonProperty(JSON_PROPERTY_REPORT) RouteReport report
  ) {
  this();
    this.report = report;
  }

  public Route vehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
    return this;
  }

  /**
   * The ID of the vehicle that is assigned to this route. A vehicle can be assigned to one route at most.
   * @return vehicleId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VEHICLE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getVehicleId() {
    return vehicleId;
  }


  @JsonProperty(JSON_PROPERTY_VEHICLE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
  }


  public Route stops(List<Stop> stops) {
    this.stops = stops;
    return this;
  }

  public Route addStopsItem(Stop stopsItem) {
    if (this.stops == null) {
      this.stops = new ArrayList<>();
    }
    this.stops.add(stopsItem);
    return this;
  }

  /**
   * A sequence of stops along this route. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: deliveries before pickups. The sequence of deliveries and pickups is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either deliveries or pickups.  See [here](./concepts/locations-transports-and-stops) for more information.
   * @return stops
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STOPS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<Stop> getStops() {
    return stops;
  }


  @JsonProperty(JSON_PROPERTY_STOPS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStops(List<Stop> stops) {
    this.stops = stops;
  }


  /**
   * Returns a summary of all events and all reports that belong to this route, including the start time and the end time of the route.
   * @return report
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public RouteReport getReport() {
    return report;
  }




  /**
   * Return true if this Route object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Route route = (Route) o;
    return Objects.equals(this.vehicleId, route.vehicleId) &&
        Objects.equals(this.stops, route.stops) &&
        Objects.equals(this.report, route.report);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vehicleId, stops, report);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Route {\n");
    sb.append("    vehicleId: ").append(toIndentedString(vehicleId)).append("\n");
    sb.append("    stops: ").append(toIndentedString(stops)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `vehicleId` to the URL query string
    if (getVehicleId() != null) {
      joiner.add(String.format("%svehicleId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVehicleId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `stops` to the URL query string
    if (getStops() != null) {
      for (int i = 0; i < getStops().size(); i++) {
        if (getStops().get(i) != null) {
          joiner.add(getStops().get(i).toUrlQueryString(String.format("%sstops%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `report` to the URL query string
    if (getReport() != null) {
      joiner.add(getReport().toUrlQueryString(prefix + "report" + suffix));
    }

    return joiner.toString();
  }
}

