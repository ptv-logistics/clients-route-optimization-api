/*
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.model.DailyRestPosition;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.routeoptimization.ApiClient;
/**
 * Defines when a daily rest becomes necessary and how long it should be. Currently, each driver must have the same values specified.  See [here](./concepts/drivers-working-hours-break-and-rest-rules) for more information.
 */
@JsonPropertyOrder({
  DailyRestRule.JSON_PROPERTY_DAILY_REST_TIME,
  DailyRestRule.JSON_PROPERTY_MAXIMUM_DRIVING_TIME_BETWEEN_DAILY_RESTS,
  DailyRestRule.JSON_PROPERTY_MAXIMUM_TRAVEL_TIME_BETWEEN_DAILY_RESTS,
  DailyRestRule.JSON_PROPERTY_DAILY_REST_POSITION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:50:35.495306091Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class DailyRestRule {
  public static final String JSON_PROPERTY_DAILY_REST_TIME = "dailyRestTime";
  private Integer dailyRestTime;

  public static final String JSON_PROPERTY_MAXIMUM_DRIVING_TIME_BETWEEN_DAILY_RESTS = "maximumDrivingTimeBetweenDailyRests";
  private JsonNullable<Integer> maximumDrivingTimeBetweenDailyRests = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAXIMUM_TRAVEL_TIME_BETWEEN_DAILY_RESTS = "maximumTravelTimeBetweenDailyRests";
  private JsonNullable<Integer> maximumTravelTimeBetweenDailyRests = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_DAILY_REST_POSITION = "dailyRestPosition";
  private DailyRestPosition dailyRestPosition = DailyRestPosition.BETWEEN_TRIPS;

  public DailyRestRule() { 
  }

  public DailyRestRule dailyRestTime(Integer dailyRestTime) {
    this.dailyRestTime = dailyRestTime;
    return this;
  }

  /**
   * The minimum duration of a daily rest [s]. Minimum is 3 hours, maximum is 22 hours.
   * minimum: 10800
   * maximum: 79200
   * @return dailyRestTime
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DAILY_REST_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getDailyRestTime() {
    return dailyRestTime;
  }


  @JsonProperty(JSON_PROPERTY_DAILY_REST_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDailyRestTime(Integer dailyRestTime) {
    this.dailyRestTime = dailyRestTime;
  }


  public DailyRestRule maximumDrivingTimeBetweenDailyRests(Integer maximumDrivingTimeBetweenDailyRests) {
    this.maximumDrivingTimeBetweenDailyRests = JsonNullable.<Integer>of(maximumDrivingTimeBetweenDailyRests);
    return this;
  }

  /**
   * Maximum duration that the driver is allowed to drive [s] before taking a daily rest. The maximum driving time is considered as infinite if it is not set.
   * minimum: 3600
   * @return maximumDrivingTimeBetweenDailyRests
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaximumDrivingTimeBetweenDailyRests() {
        return maximumDrivingTimeBetweenDailyRests.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRIVING_TIME_BETWEEN_DAILY_RESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaximumDrivingTimeBetweenDailyRests_JsonNullable() {
    return maximumDrivingTimeBetweenDailyRests;
  }
  
  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRIVING_TIME_BETWEEN_DAILY_RESTS)
  public void setMaximumDrivingTimeBetweenDailyRests_JsonNullable(JsonNullable<Integer> maximumDrivingTimeBetweenDailyRests) {
    this.maximumDrivingTimeBetweenDailyRests = maximumDrivingTimeBetweenDailyRests;
  }

  public void setMaximumDrivingTimeBetweenDailyRests(Integer maximumDrivingTimeBetweenDailyRests) {
    this.maximumDrivingTimeBetweenDailyRests = JsonNullable.<Integer>of(maximumDrivingTimeBetweenDailyRests);
  }


  public DailyRestRule maximumTravelTimeBetweenDailyRests(Integer maximumTravelTimeBetweenDailyRests) {
    this.maximumTravelTimeBetweenDailyRests = JsonNullable.<Integer>of(maximumTravelTimeBetweenDailyRests);
    return this;
  }

  /**
   * Maximum duration that the driver is allowed to travel [s] before taking a daily. The maximum travel time is considered as infinite if it is not set.
   * minimum: 3600
   * @return maximumTravelTimeBetweenDailyRests
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaximumTravelTimeBetweenDailyRests() {
        return maximumTravelTimeBetweenDailyRests.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAXIMUM_TRAVEL_TIME_BETWEEN_DAILY_RESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaximumTravelTimeBetweenDailyRests_JsonNullable() {
    return maximumTravelTimeBetweenDailyRests;
  }
  
  @JsonProperty(JSON_PROPERTY_MAXIMUM_TRAVEL_TIME_BETWEEN_DAILY_RESTS)
  public void setMaximumTravelTimeBetweenDailyRests_JsonNullable(JsonNullable<Integer> maximumTravelTimeBetweenDailyRests) {
    this.maximumTravelTimeBetweenDailyRests = maximumTravelTimeBetweenDailyRests;
  }

  public void setMaximumTravelTimeBetweenDailyRests(Integer maximumTravelTimeBetweenDailyRests) {
    this.maximumTravelTimeBetweenDailyRests = JsonNullable.<Integer>of(maximumTravelTimeBetweenDailyRests);
  }


  public DailyRestRule dailyRestPosition(DailyRestPosition dailyRestPosition) {
    this.dailyRestPosition = dailyRestPosition;
    return this;
  }

  /**
   * Get dailyRestPosition
   * @return dailyRestPosition
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DAILY_REST_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DailyRestPosition getDailyRestPosition() {
    return dailyRestPosition;
  }


  @JsonProperty(JSON_PROPERTY_DAILY_REST_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDailyRestPosition(DailyRestPosition dailyRestPosition) {
    this.dailyRestPosition = dailyRestPosition;
  }


  /**
   * Return true if this DailyRestRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyRestRule dailyRestRule = (DailyRestRule) o;
    return Objects.equals(this.dailyRestTime, dailyRestRule.dailyRestTime) &&
        equalsNullable(this.maximumDrivingTimeBetweenDailyRests, dailyRestRule.maximumDrivingTimeBetweenDailyRests) &&
        equalsNullable(this.maximumTravelTimeBetweenDailyRests, dailyRestRule.maximumTravelTimeBetweenDailyRests) &&
        Objects.equals(this.dailyRestPosition, dailyRestRule.dailyRestPosition);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dailyRestTime, hashCodeNullable(maximumDrivingTimeBetweenDailyRests), hashCodeNullable(maximumTravelTimeBetweenDailyRests), dailyRestPosition);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyRestRule {\n");
    sb.append("    dailyRestTime: ").append(toIndentedString(dailyRestTime)).append("\n");
    sb.append("    maximumDrivingTimeBetweenDailyRests: ").append(toIndentedString(maximumDrivingTimeBetweenDailyRests)).append("\n");
    sb.append("    maximumTravelTimeBetweenDailyRests: ").append(toIndentedString(maximumTravelTimeBetweenDailyRests)).append("\n");
    sb.append("    dailyRestPosition: ").append(toIndentedString(dailyRestPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `dailyRestTime` to the URL query string
    if (getDailyRestTime() != null) {
      joiner.add(String.format("%sdailyRestTime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDailyRestTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `maximumDrivingTimeBetweenDailyRests` to the URL query string
    if (getMaximumDrivingTimeBetweenDailyRests() != null) {
      joiner.add(String.format("%smaximumDrivingTimeBetweenDailyRests%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMaximumDrivingTimeBetweenDailyRests()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `maximumTravelTimeBetweenDailyRests` to the URL query string
    if (getMaximumTravelTimeBetweenDailyRests() != null) {
      joiner.add(String.format("%smaximumTravelTimeBetweenDailyRests%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMaximumTravelTimeBetweenDailyRests()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dailyRestPosition` to the URL query string
    if (getDailyRestPosition() != null) {
      joiner.add(String.format("%sdailyRestPosition%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDailyRestPosition()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

