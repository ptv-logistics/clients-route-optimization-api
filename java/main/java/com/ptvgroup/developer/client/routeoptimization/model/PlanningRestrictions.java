/*
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.model.MixedLoadingProhibition;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.routeoptimization.ApiClient;
/**
 * Planning restrictions that must hold for all routes.
 */
@JsonPropertyOrder({
  PlanningRestrictions.JSON_PROPERTY_SINGLE_TRIP_PER_ROUTE,
  PlanningRestrictions.JSON_PROPERTY_SINGLE_DEPOT_PER_ROUTE,
  PlanningRestrictions.JSON_PROPERTY_MIXED_LOADING_PROHIBITIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:50:35.495306091Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PlanningRestrictions {
  public static final String JSON_PROPERTY_SINGLE_TRIP_PER_ROUTE = "singleTripPerRoute";
  private Boolean singleTripPerRoute = false;

  public static final String JSON_PROPERTY_SINGLE_DEPOT_PER_ROUTE = "singleDepotPerRoute";
  private Boolean singleDepotPerRoute = false;

  public static final String JSON_PROPERTY_MIXED_LOADING_PROHIBITIONS = "mixedLoadingProhibitions";
  private List<MixedLoadingProhibition> mixedLoadingProhibitions;

  public PlanningRestrictions() { 
  }

  public PlanningRestrictions singleTripPerRoute(Boolean singleTripPerRoute) {
    this.singleTripPerRoute = singleTripPerRoute;
    return this;
  }

  /**
   * Restricts the number of trips per route to one.  See [here](./concepts/route-structure-control) for more information.
   * @return singleTripPerRoute
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SINGLE_TRIP_PER_ROUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSingleTripPerRoute() {
    return singleTripPerRoute;
  }


  @JsonProperty(JSON_PROPERTY_SINGLE_TRIP_PER_ROUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSingleTripPerRoute(Boolean singleTripPerRoute) {
    this.singleTripPerRoute = singleTripPerRoute;
  }


  public PlanningRestrictions singleDepotPerRoute(Boolean singleDepotPerRoute) {
    this.singleDepotPerRoute = singleDepotPerRoute;
    return this;
  }

  /**
   * Restricts the number of different depot locations in the route of a vehicle to at most one. The vehicle start and end locations do not count here.  See [here](./concepts/route-structure-control) for more information.
   * @return singleDepotPerRoute
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SINGLE_DEPOT_PER_ROUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSingleDepotPerRoute() {
    return singleDepotPerRoute;
  }


  @JsonProperty(JSON_PROPERTY_SINGLE_DEPOT_PER_ROUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSingleDepotPerRoute(Boolean singleDepotPerRoute) {
    this.singleDepotPerRoute = singleDepotPerRoute;
  }


  public PlanningRestrictions mixedLoadingProhibitions(List<MixedLoadingProhibition> mixedLoadingProhibitions) {
    this.mixedLoadingProhibitions = mixedLoadingProhibitions;
    return this;
  }

  public PlanningRestrictions addMixedLoadingProhibitionsItem(MixedLoadingProhibition mixedLoadingProhibitionsItem) {
    if (this.mixedLoadingProhibitions == null) {
      this.mixedLoadingProhibitions = new ArrayList<>();
    }
    this.mixedLoadingProhibitions.add(mixedLoadingProhibitionsItem);
    return this;
  }

  /**
   * Defines restrictions regarding which load categories of transports are disallowed to be mixed on the same trip. 
   * @return mixedLoadingProhibitions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIXED_LOADING_PROHIBITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<MixedLoadingProhibition> getMixedLoadingProhibitions() {
    return mixedLoadingProhibitions;
  }


  @JsonProperty(JSON_PROPERTY_MIXED_LOADING_PROHIBITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMixedLoadingProhibitions(List<MixedLoadingProhibition> mixedLoadingProhibitions) {
    this.mixedLoadingProhibitions = mixedLoadingProhibitions;
  }


  /**
   * Return true if this PlanningRestrictions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanningRestrictions planningRestrictions = (PlanningRestrictions) o;
    return Objects.equals(this.singleTripPerRoute, planningRestrictions.singleTripPerRoute) &&
        Objects.equals(this.singleDepotPerRoute, planningRestrictions.singleDepotPerRoute) &&
        Objects.equals(this.mixedLoadingProhibitions, planningRestrictions.mixedLoadingProhibitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(singleTripPerRoute, singleDepotPerRoute, mixedLoadingProhibitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanningRestrictions {\n");
    sb.append("    singleTripPerRoute: ").append(toIndentedString(singleTripPerRoute)).append("\n");
    sb.append("    singleDepotPerRoute: ").append(toIndentedString(singleDepotPerRoute)).append("\n");
    sb.append("    mixedLoadingProhibitions: ").append(toIndentedString(mixedLoadingProhibitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `singleTripPerRoute` to the URL query string
    if (getSingleTripPerRoute() != null) {
      joiner.add(String.format("%ssingleTripPerRoute%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSingleTripPerRoute()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `singleDepotPerRoute` to the URL query string
    if (getSingleDepotPerRoute() != null) {
      joiner.add(String.format("%ssingleDepotPerRoute%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSingleDepotPerRoute()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `mixedLoadingProhibitions` to the URL query string
    if (getMixedLoadingProhibitions() != null) {
      for (int i = 0; i < getMixedLoadingProhibitions().size(); i++) {
        if (getMixedLoadingProhibitions().get(i) != null) {
          joiner.add(getMixedLoadingProhibitions().get(i).toUrlQueryString(String.format("%smixedLoadingProhibitions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

