/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TimeInterval } from './TimeInterval';
import {
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
    TimeIntervalToJSONTyped,
} from './TimeInterval';
import type { CapacitiesChangePosition } from './CapacitiesChangePosition';
import {
    CapacitiesChangePositionFromJSON,
    CapacitiesChangePositionFromJSONTyped,
    CapacitiesChangePositionToJSON,
    CapacitiesChangePositionToJSONTyped,
} from './CapacitiesChangePosition';

/**
 * A vehicle that is used to transport goods.
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * A unique ID across all vehicles. The ID does not influence the result except the sorting of the routes.
     * @type {string}
     * @memberof Vehicle
     */
    id: string;
    /**
     * List of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all vehicles. If and only if this list of capacities is empty for all vehicles, the quantities of each transport must be empty.
     * @type {Array<number>}
     * @memberof Vehicle
     */
    capacities?: Array<number>;
    /**
     * List of alternative capacities. Each entry in this array must be valid capacities, more details are described in **capacities**. If a route cannot be driven with the **capacities**, alternative capacities may be chosen by the optimization considering the chosen **capacitiesChangePosition**.
     * 
     * See [here](./concepts/capacities-and-alternative-capacities) for more information.
     * @type {Array<Array<number>>}
     * @memberof Vehicle
     */
    alternativeCapacities?: Array<Array<number>>;
    /**
     * 
     * @type {CapacitiesChangePosition}
     * @memberof Vehicle
     */
    capacitiesChangePosition?: CapacitiesChangePosition;
    /**
     * List of vehicle equipment. A transport can only be served by the vehicle if this list is a superset of (or equal to) the transport's required vehicle equipment.
     * @type {Array<string>}
     * @memberof Vehicle
     */
    equipment?: Array<string>;
    /**
     * The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations. See [here](./concepts/profiles-and-countries) for a complete list of allowed values. If the majority of locations are in the Americas, _USA_8_SEMITRAILER_5AXLE_ is used as the default. Otherwise, _EUR_TRAILER_TRUCK_ is used as the default.
     * 
     * If most locations are located in the Americas but a non-American vehicle profile is specified or vice-versa, a warning is returned. Always use a vehicle profile which matches the region of the locations to obtain best results.
     * @type {string}
     * @memberof Vehicle
     */
    profile?: string;
    /**
     * ID of the vehicle's start location. If the vehicle start location does not coincide with the location of the first pickup, only the coordinates of the vehicle start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop.
     * @type {string}
     * @memberof Vehicle
     */
    startLocationId?: string;
    /**
     * ID of the vehicle's end location. If the vehicle end location does not coincide with the location of the last delivery, only the coordinates of the vehicle end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop.
     * @type {string}
     * @memberof Vehicle
     */
    endLocationId?: string;
    /**
     * Vehicle-dependent service time [s], for example, for maneuvering. This service time is taken into account for each stop served by this vehicle to pick up or deliver goods. Besides a vehicle-dependent service time, the user may specify location- and transport-dependent service times at the locations and the transports respectively.
     * @type {number}
     * @memberof Vehicle
     */
    serviceTimePerTransportStop?: number;
    /**
     * A factor that scales transport-dependent service times of all transport-related service actions, for example, if loading and unloading is more or less complicated than for other vehicles. A factor less than one means that the vehicle speeds up the service, a factor greater than one means that it slows the service down.
     * @type {number}
     * @memberof Vehicle
     */
    serviceTimeFactor?: number;
    /**
     * Indicates whether the mixed loading prohibitions are relevant for this vehicle. If set to false, the mixed loading prohibitions -- if there are any -- must be respected on every trip of the vehicle. If set to true, the mixed loading prohibitions are ignored by the vehicle.
     * @type {boolean}
     * @memberof Vehicle
     */
    ignoreMixedLoadingProhibitions?: boolean;
    /**
     * Interval in which the vehicle has to start its route. Start and end of the interval may be the same. Leaving this parameter empty means that the route start is unrestricted.
     * @type {TimeInterval}
     * @memberof Vehicle
     */
    routeStartInterval?: TimeInterval;
    /**
     * Restricts the maximum allowed total driving distance [m] for the route of this vehicle.
     * @type {number}
     * @memberof Vehicle
     */
    maximumDistance?: number | null;
    /**
     * Restricts the maximum allowed total number of customer stops, i.e. stops at customer locations, for the route of this vehicle.
     * @type {number}
     * @memberof Vehicle
     */
    maximumNumberOfCustomerStops?: number | null;
}



/**
 * Check if a given object implements the Vehicle interface.
 */
export function instanceOfVehicle(value: object): value is Vehicle {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function VehicleFromJSON(json: any): Vehicle {
    return VehicleFromJSONTyped(json, false);
}

export function VehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vehicle {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'capacities': json['capacities'] == null ? undefined : json['capacities'],
        'alternativeCapacities': json['alternativeCapacities'] == null ? undefined : json['alternativeCapacities'],
        'capacitiesChangePosition': json['capacitiesChangePosition'] == null ? undefined : CapacitiesChangePositionFromJSON(json['capacitiesChangePosition']),
        'equipment': json['equipment'] == null ? undefined : json['equipment'],
        'profile': json['profile'] == null ? undefined : json['profile'],
        'startLocationId': json['startLocationId'] == null ? undefined : json['startLocationId'],
        'endLocationId': json['endLocationId'] == null ? undefined : json['endLocationId'],
        'serviceTimePerTransportStop': json['serviceTimePerTransportStop'] == null ? undefined : json['serviceTimePerTransportStop'],
        'serviceTimeFactor': json['serviceTimeFactor'] == null ? undefined : json['serviceTimeFactor'],
        'ignoreMixedLoadingProhibitions': json['ignoreMixedLoadingProhibitions'] == null ? undefined : json['ignoreMixedLoadingProhibitions'],
        'routeStartInterval': json['routeStartInterval'] == null ? undefined : TimeIntervalFromJSON(json['routeStartInterval']),
        'maximumDistance': json['maximumDistance'] == null ? undefined : json['maximumDistance'],
        'maximumNumberOfCustomerStops': json['maximumNumberOfCustomerStops'] == null ? undefined : json['maximumNumberOfCustomerStops'],
    };
}

  export function VehicleToJSON(json: any): Vehicle {
      return VehicleToJSONTyped(json, false);
  }

  export function VehicleToJSONTyped(value?: Vehicle | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'capacities': value['capacities'],
        'alternativeCapacities': value['alternativeCapacities'],
        'capacitiesChangePosition': CapacitiesChangePositionToJSON(value['capacitiesChangePosition']),
        'equipment': value['equipment'],
        'profile': value['profile'],
        'startLocationId': value['startLocationId'],
        'endLocationId': value['endLocationId'],
        'serviceTimePerTransportStop': value['serviceTimePerTransportStop'],
        'serviceTimeFactor': value['serviceTimeFactor'],
        'ignoreMixedLoadingProhibitions': value['ignoreMixedLoadingProhibitions'],
        'routeStartInterval': TimeIntervalToJSON(value['routeStartInterval']),
        'maximumDistance': value['maximumDistance'],
        'maximumNumberOfCustomerStops': value['maximumNumberOfCustomerStops'],
    };
}

