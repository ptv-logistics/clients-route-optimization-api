/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The summary of a plan.
 * @export
 * @interface PlanSummary
 */
export interface PlanSummary {
    /**
     * The ID of the plan.
     * @type {string}
     * @memberof PlanSummary
     */
    id: string;
    /**
     * Number of locations in the plan.
     * @type {number}
     * @memberof PlanSummary
     */
    numberOfLocations: number;
    /**
     * Number of vehicles in the plan.
     * @type {number}
     * @memberof PlanSummary
     */
    numberOfVehicles: number;
    /**
     * Number of transports in the plan.
     * @type {number}
     * @memberof PlanSummary
     */
    numberOfTransports: number;
    /**
     * Number of routes in the plan.
     * @type {number}
     * @memberof PlanSummary
     */
    numberOfRoutes: number;
    /**
     * The description of the plan.
     * @type {string}
     * @memberof PlanSummary
     */
    description?: string;
    /**
     * Time of the latest update of the plan formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof PlanSummary
     */
    updateTime: Date;
    /**
     * Time of the creation of the plan formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof PlanSummary
     */
    creationTime: Date;
}

/**
 * Check if a given object implements the PlanSummary interface.
 */
export function instanceOfPlanSummary(value: object): value is PlanSummary {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('numberOfLocations' in value) || value['numberOfLocations'] === undefined) return false;
    if (!('numberOfVehicles' in value) || value['numberOfVehicles'] === undefined) return false;
    if (!('numberOfTransports' in value) || value['numberOfTransports'] === undefined) return false;
    if (!('numberOfRoutes' in value) || value['numberOfRoutes'] === undefined) return false;
    if (!('updateTime' in value) || value['updateTime'] === undefined) return false;
    if (!('creationTime' in value) || value['creationTime'] === undefined) return false;
    return true;
}

export function PlanSummaryFromJSON(json: any): PlanSummary {
    return PlanSummaryFromJSONTyped(json, false);
}

export function PlanSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlanSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'numberOfLocations': json['numberOfLocations'],
        'numberOfVehicles': json['numberOfVehicles'],
        'numberOfTransports': json['numberOfTransports'],
        'numberOfRoutes': json['numberOfRoutes'],
        'description': json['description'] == null ? undefined : json['description'],
        'updateTime': (new Date(json['updateTime'])),
        'creationTime': (new Date(json['creationTime'])),
    };
}

  export function PlanSummaryToJSON(json: any): PlanSummary {
      return PlanSummaryToJSONTyped(json, false);
  }

  export function PlanSummaryToJSONTyped(value?: PlanSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'numberOfLocations': value['numberOfLocations'],
        'numberOfVehicles': value['numberOfVehicles'],
        'numberOfTransports': value['numberOfTransports'],
        'numberOfRoutes': value['numberOfRoutes'],
        'description': value['description'],
        'updateTime': ((value['updateTime']).toISOString()),
        'creationTime': ((value['creationTime']).toISOString()),
    };
}

