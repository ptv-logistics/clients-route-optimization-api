/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MixedLoadingProhibition } from './MixedLoadingProhibition';
import {
    MixedLoadingProhibitionFromJSON,
    MixedLoadingProhibitionFromJSONTyped,
    MixedLoadingProhibitionToJSON,
    MixedLoadingProhibitionToJSONTyped,
} from './MixedLoadingProhibition';
import type { ViolationType } from './ViolationType';
import {
    ViolationTypeFromJSON,
    ViolationTypeFromJSONTyped,
    ViolationTypeToJSON,
    ViolationTypeToJSONTyped,
} from './ViolationType';

/**
 * Specifies a violation of a route.
 * @export
 * @interface Violation
 */
export interface Violation {
    /**
     * 
     * @type {ViolationType}
     * @memberof Violation
     */
    type: ViolationType;
    /**
     * Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _PLANNING_HORIZON_, _ROUTE_START_INTERVAL_, _DRIVER_AVAILABILITY_, _OPENING_INTERVAL_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_DRIVING_TIME_OF_DRIVER_.
     * @type {number}
     * @memberof Violation
     */
    timeExceedance?: number;
    /**
     * Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_.
     * @type {number}
     * @memberof Violation
     */
    distanceExceedance?: number;
    /**
     * Specifies a violation that involves a stop limit: Number of stops by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_.
     * @type {number}
     * @memberof Violation
     */
    numberOfStopsExceedance?: number;
    /**
     * Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation type: _VEHICLE_CAPACITY_.
     * @type {Array<number>}
     * @memberof Violation
     */
    capacityExceedance?: Array<number>;
    /**
     * Specifies a violation for missing equipment (e.g. missing equipment of the used vehicle) that is required by the transports of the route. Is only filled for the following violation type: _VEHICLE_EQUIPMENT_.
     * @type {Array<string>}
     * @memberof Violation
     */
    missingEquipment?: Array<string>;
    /**
     * Is only filled for the following violation type: _MIXED_LOADING_PROHIBITION_.
     * @type {Array<MixedLoadingProhibition>}
     * @memberof Violation
     */
    mixedLoadingProhibitions?: Array<MixedLoadingProhibition>;
}



/**
 * Check if a given object implements the Violation interface.
 */
export function instanceOfViolation(value: object): value is Violation {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function ViolationFromJSON(json: any): Violation {
    return ViolationFromJSONTyped(json, false);
}

export function ViolationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Violation {
    if (json == null) {
        return json;
    }
    return {
        
        'type': ViolationTypeFromJSON(json['type']),
        'timeExceedance': json['timeExceedance'] == null ? undefined : json['timeExceedance'],
        'distanceExceedance': json['distanceExceedance'] == null ? undefined : json['distanceExceedance'],
        'numberOfStopsExceedance': json['numberOfStopsExceedance'] == null ? undefined : json['numberOfStopsExceedance'],
        'capacityExceedance': json['capacityExceedance'] == null ? undefined : json['capacityExceedance'],
        'missingEquipment': json['missingEquipment'] == null ? undefined : json['missingEquipment'],
        'mixedLoadingProhibitions': json['mixedLoadingProhibitions'] == null ? undefined : ((json['mixedLoadingProhibitions'] as Array<any>).map(MixedLoadingProhibitionFromJSON)),
    };
}

  export function ViolationToJSON(json: any): Violation {
      return ViolationToJSONTyped(json, false);
  }

  export function ViolationToJSONTyped(value?: Violation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': ViolationTypeToJSON(value['type']),
        'timeExceedance': value['timeExceedance'],
        'distanceExceedance': value['distanceExceedance'],
        'numberOfStopsExceedance': value['numberOfStopsExceedance'],
        'capacityExceedance': value['capacityExceedance'],
        'missingEquipment': value['missingEquipment'],
        'mixedLoadingProhibitions': value['mixedLoadingProhibitions'] == null ? undefined : ((value['mixedLoadingProhibitions'] as Array<any>).map(MixedLoadingProhibitionToJSON)),
    };
}

