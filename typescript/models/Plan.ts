/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Vehicle } from './Vehicle';
import {
    VehicleFromJSON,
    VehicleFromJSONTyped,
    VehicleToJSON,
    VehicleToJSONTyped,
} from './Vehicle';
import type { Warning } from './Warning';
import {
    WarningFromJSON,
    WarningFromJSONTyped,
    WarningToJSON,
    WarningToJSONTyped,
} from './Warning';
import type { TimeInterval } from './TimeInterval';
import {
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
    TimeIntervalToJSONTyped,
} from './TimeInterval';
import type { PlanningRestrictions } from './PlanningRestrictions';
import {
    PlanningRestrictionsFromJSON,
    PlanningRestrictionsFromJSONTyped,
    PlanningRestrictionsToJSON,
    PlanningRestrictionsToJSONTyped,
} from './PlanningRestrictions';
import type { Driver } from './Driver';
import {
    DriverFromJSON,
    DriverFromJSONTyped,
    DriverToJSON,
    DriverToJSONTyped,
} from './Driver';
import type { Transport } from './Transport';
import {
    TransportFromJSON,
    TransportFromJSONTyped,
    TransportToJSON,
    TransportToJSONTyped,
} from './Transport';
import type { Route } from './Route';
import {
    RouteFromJSON,
    RouteFromJSONTyped,
    RouteToJSON,
    RouteToJSONTyped,
} from './Route';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
    LocationToJSONTyped,
} from './Location';

/**
 * The request object for the service method 'createPlan' and the result of the service method 'getPlan'.
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * The ID of the plan. It is generated when the plan is created.
     * @type {string}
     * @memberof Plan
     */
    readonly id: string;
    /**
     * A description of the plan.
     * @type {string}
     * @memberof Plan
     */
    description?: string;
    /**
     * A list of depot or customer locations that may be referenced by vehicles, transports and stops. A location is either a depot location or a customer location. Depot locations act as trip delimiters. Each location must be referenced by another object. If a request contains a location not referenced by any other object, the request will be rejected.
     * @type {Array<Location>}
     * @memberof Plan
     */
    locations: Array<Location>;
    /**
     * A list of vehicles that can be used to transport goods.
     * @type {Array<Vehicle>}
     * @memberof Plan
     */
    vehicles: Array<Vehicle>;
    /**
     * A list of drivers. A driver is always assigned to a specific vehicle. In turn, a vehicle can but does not need to have a driver assigned to it. If a driver is assigned to a vehicle, the driver's restrictions apply, such as its limited availability. If no drivers are specified, the drivers of all vehicles are always available.
     * @type {Array<Driver>}
     * @memberof Plan
     */
    drivers?: Array<Driver>;
    /**
     * A list of transports, that is, orders to transport goods from one location to another location. Depending on your subscription, a more restrictive value for maximum number of transport may apply. Check request limits of your subscription.
     * @type {Array<Transport>}
     * @memberof Plan
     */
    transports: Array<Transport>;
    /**
     * The planning horizon for the plan, described by start and end date and time. All routes have to start and end within this planning horizon. All opening intervals outside of this planning horizon are not considered by the algorithm. If specified, the planning horizon is restricted to a maximum duration of two weeks. If not specified, the planning horizon is infinite. If no other time interval is specified within this plan, the planning horizon is required.
     * @type {TimeInterval}
     * @memberof Plan
     */
    planningHorizon?: TimeInterval;
    /**
     * 
     * @type {PlanningRestrictions}
     * @memberof Plan
     */
    restrictions?: PlanningRestrictions;
    /**
     * A list of routes. A route contains a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop can be assigned to a trip. A route is subdivided into trips. Each route has at least one trip and a trip consists of at least two stops. At the beginning and end of each trip the vehicle does not carry any load. A trip starts at the vehicle start location or at a depot location, and ends at the vehicle end location or at a depot location. If routes are already given in input they are considered during planning. Transports which are already planned in an input route will also remain planned in the output routes. This might lead to violations of the routes. 
     * 
     * See [here](./concepts/routes-and-trips) for more information.
     * @type {Array<Route>}
     * @memberof Plan
     */
    routes?: Array<Route>;
    /**
     * Returns the vehicle IDs that are not used in the response of an optimization operation. These vehicles are not assigned to any route.
     * @type {Array<string>}
     * @memberof Plan
     */
    readonly unplannedVehicleIds?: Array<string>;
    /**
     * Returns the transport IDs that could not be planned in the response of an optimization operation. These transports are not part of the routes.
     * @type {Array<string>}
     * @memberof Plan
     */
    readonly unplannedTransportIds?: Array<string>;
    /**
     * A list of warnings concerning the validity of the result.
     * @type {Array<Warning>}
     * @memberof Plan
     */
    readonly warnings?: Array<Warning>;
}

/**
 * Check if a given object implements the Plan interface.
 */
export function instanceOfPlan(value: object): value is Plan {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('locations' in value) || value['locations'] === undefined) return false;
    if (!('vehicles' in value) || value['vehicles'] === undefined) return false;
    if (!('transports' in value) || value['transports'] === undefined) return false;
    return true;
}

export function PlanFromJSON(json: any): Plan {
    return PlanFromJSONTyped(json, false);
}

export function PlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): Plan {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'description': json['description'] == null ? undefined : json['description'],
        'locations': ((json['locations'] as Array<any>).map(LocationFromJSON)),
        'vehicles': ((json['vehicles'] as Array<any>).map(VehicleFromJSON)),
        'drivers': json['drivers'] == null ? undefined : ((json['drivers'] as Array<any>).map(DriverFromJSON)),
        'transports': ((json['transports'] as Array<any>).map(TransportFromJSON)),
        'planningHorizon': json['planningHorizon'] == null ? undefined : TimeIntervalFromJSON(json['planningHorizon']),
        'restrictions': json['restrictions'] == null ? undefined : PlanningRestrictionsFromJSON(json['restrictions']),
        'routes': json['routes'] == null ? undefined : ((json['routes'] as Array<any>).map(RouteFromJSON)),
        'unplannedVehicleIds': json['unplannedVehicleIds'] == null ? undefined : json['unplannedVehicleIds'],
        'unplannedTransportIds': json['unplannedTransportIds'] == null ? undefined : json['unplannedTransportIds'],
        'warnings': json['warnings'] == null ? undefined : ((json['warnings'] as Array<any>).map(WarningFromJSON)),
    };
}

  export function PlanToJSON(json: any): Plan {
      return PlanToJSONTyped(json, false);
  }

  export function PlanToJSONTyped(value?: Omit<Plan, 'id'|'unplannedVehicleIds'|'unplannedTransportIds'|'warnings'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'locations': ((value['locations'] as Array<any>).map(LocationToJSON)),
        'vehicles': ((value['vehicles'] as Array<any>).map(VehicleToJSON)),
        'drivers': value['drivers'] == null ? undefined : ((value['drivers'] as Array<any>).map(DriverToJSON)),
        'transports': ((value['transports'] as Array<any>).map(TransportToJSON)),
        'planningHorizon': TimeIntervalToJSON(value['planningHorizon']),
        'restrictions': PlanningRestrictionsToJSON(value['restrictions']),
        'routes': value['routes'] == null ? undefined : ((value['routes'] as Array<any>).map(RouteToJSON)),
    };
}

