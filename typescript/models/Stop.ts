/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Violation } from './Violation';
import {
    ViolationFromJSON,
    ViolationFromJSONTyped,
    ViolationToJSON,
    ViolationToJSONTyped,
} from './Violation';
import type { WayReport } from './WayReport';
import {
    WayReportFromJSON,
    WayReportFromJSONTyped,
    WayReportToJSON,
    WayReportToJSONTyped,
} from './WayReport';
import type { Event } from './Event';
import {
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
    EventToJSONTyped,
} from './Event';
import type { StopReport } from './StopReport';
import {
    StopReportFromJSON,
    StopReportFromJSONTyped,
    StopReportToJSON,
    StopReportToJSONTyped,
} from './StopReport';

/**
 * A stop groups subsequent deliveries and/or pickups at the same location. At a customer location, transports are scheduled in order of their type: deliveries before pickups. At a depot location a stop groups either deliveries or pickups.
 * 
 * See [here](./concepts/locations-transports-and-stops) for more information.
 * @export
 * @interface Stop
 */
export interface Stop {
    /**
     * A reference to a location. Usually, goods are picked up or delivered here. If no goods are picked up or delivered, it is the location where a route or a trip starts or ends.
     * @type {string}
     * @memberof Stop
     */
    locationId: string;
    /**
     * The trip ID groups several subsequent stops. The first stop and the last stop of a route may not have a trip ID only if the vehicle that is assigned to this route has a start or an end location, respectively.
     * 
     * See [here](./concepts/routes-and-trips) for more information.
     * @type {string}
     * @memberof Stop
     */
    tripId?: string;
    /**
     * A list of transport IDs that are delivered at this stop.
     * @type {Array<string>}
     * @memberof Stop
     */
    deliveryIds?: Array<string>;
    /**
     * A list of transport IDs that are picked up at this stop.
     * @type {Array<string>}
     * @memberof Stop
     */
    pickupIds?: Array<string>;
    /**
     * Contains summary values of the events on the way from the previous stop to the current stop, including the driving time. The very first stop of a route has a way report with empty values.
     * @type {WayReport}
     * @memberof Stop
     */
    readonly reportForWayToStop: WayReport;
    /**
     * Contains summary values of the events at a stop, including the arrival time, the departure time and the service time It also contains information about the loaded quantities when leaving the current stop.
     * @type {StopReport}
     * @memberof Stop
     */
    readonly reportForStop: StopReport;
    /**
     * A list of events that occur on the way from the previous stop to this stop. An event specifies what happens on a route at a certain point in time. It can describe the driver's activity such as driving or break.
     * @type {Array<Event>}
     * @memberof Stop
     */
    readonly eventsOnWayToStop: Array<Event>;
    /**
     * A list of events that occur at this stop. An event specifies what happens on a route at a certain point in time. It can describe the driver's activity such as performing service or waiting, or it can denote the start/end of a route/trip.
     * @type {Array<Event>}
     * @memberof Stop
     */
    readonly eventsAtStop: Array<Event>;
    /**
     * A list of violations that occur on the way from the previous stop to this stop. The following violation types can occur here: _PLANNING_HORIZON_, _DRIVER_AVAILABILITY_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_DRIVING_TIME_OF_DRIVER_, _MAXIMUM_DISTANCE_, _REST_POSITION_. 
     * 
     *  _REST_POSITION_ is reported if a daily rest has to be taken on the way to this stop to respect the daily rest rule. The expected position for a daily rest is at the end of a trip. For all other violations, the maximum time or distance exceedance on the way to this stop is reported. 
     * 
     *  Violations of type _PLANNING_HORIZON_ and _MAXIMUM_TRAVEL_TIME_OF_DRIVER_ will reoccur (with increasing value for TimeExceedence) for all following ways and stops of the current route. 
     * 
     *  Violations of type _MAXIMUM_DRIVING_TIME_OF_DRIVER_ and _MAXIMUM_DISTANCE_ will reoccur (with increasing value for TimeExceedence resp. DistanceExceedance) for all following ways of the current route. 
     * 
     *  Violations of type _DRIVER_AVAILABILITY_ will reoccur (with increasing value for TimeExceedence) for all following ways and stops of the current trip.
     * @type {Array<Violation>}
     * @memberof Stop
     */
    readonly violationsOnWayToStop: Array<Violation>;
    /**
     * A list of violations that occur at this stop. The following violation types can occur here: _PLANNING_HORIZON_, _DRIVER_AVAILABILITY_, _OPENING_INTERVAL_, _VEHICLE_CAPACITY_, _VEHICLE_EQUIPMENT_, _ROUTE_START_INTERVAL_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_, _REST_POSITION_, _STOP_POSITION_IN_TRIP_, _TRIP_SECTION_, _MIXED_LOADING_PROHIBITION_. 
     * 
     *  _ROUTE_START_INTERVAL_ is reported at the first stop in a route. 
     * 
     *  For _VEHICLE_CAPACITY_ and _VEHICLE_EQUIPMENT_, the violation when leaving the stop is reported (i.e., at the last stop of the route, when everything is unloaded, there will be no such violation). 
     * 
     *  _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_ is reported when the current stop reaches the limit of the number of customer stops and is repeated for all following customer stops (with increasing value for NumberOfStopsExceedance). 
     * 
     *  _REST_POSITION_ is reported if a daily rest has to be taken at this stop to respect the daily rest rule. The expected position for a daily rest is at the end of a trip. 
     * 
     *  For all other violations, the maximum time exceedance at this stop is reported. 
     * 
     *  Violations of type _PLANNING_HORIZON_ and _MAXIMUM_TRAVEL_TIME_OF_DRIVER_ will reoccur (with increasing value for TimeExceedence) for all following ways and stops of the current route. 
     * 
     *  Violations of type _DRIVER_AVAILABILITY_ will reoccur (with increasing value for TimeExceedence) for all following ways and stops of the current trip. 
     * 
     *  Violations of type _VEHICLE_CAPACITY_ will reoccur at all following stops until enough goods are unloaded and the vehicle capacity is not exceeded anymore. 
     * 
     *  Violations of type _VEHICLE_EQUIPMENT_ will reoccur at all following stops until goods which require the missing equipment are unloaded and no equipment is missing anymore. 
     * 
     *  Violations of type _STOP_POSITION_IN_TRIP_ will occur at all stops where a position in trip is set for this location ant the current customer stop is not the first/last in the trip. 
     * 
     *  Violations of type _TRIP_SECTION_ will occur at all stops where the previous trip section number is higher than the one at this customer location. 
     * 
     *  Violations of type _MIXED_LOADING_PROHIBITION_ will occur at all stops where a load whose category must not be loaded with another load category in the trip is picked up.
     * @type {Array<Violation>}
     * @memberof Stop
     */
    readonly violationsAtStop: Array<Violation>;
}

/**
 * Check if a given object implements the Stop interface.
 */
export function instanceOfStop(value: object): value is Stop {
    if (!('locationId' in value) || value['locationId'] === undefined) return false;
    if (!('reportForWayToStop' in value) || value['reportForWayToStop'] === undefined) return false;
    if (!('reportForStop' in value) || value['reportForStop'] === undefined) return false;
    if (!('eventsOnWayToStop' in value) || value['eventsOnWayToStop'] === undefined) return false;
    if (!('eventsAtStop' in value) || value['eventsAtStop'] === undefined) return false;
    if (!('violationsOnWayToStop' in value) || value['violationsOnWayToStop'] === undefined) return false;
    if (!('violationsAtStop' in value) || value['violationsAtStop'] === undefined) return false;
    return true;
}

export function StopFromJSON(json: any): Stop {
    return StopFromJSONTyped(json, false);
}

export function StopFromJSONTyped(json: any, ignoreDiscriminator: boolean): Stop {
    if (json == null) {
        return json;
    }
    return {
        
        'locationId': json['locationId'],
        'tripId': json['tripId'] == null ? undefined : json['tripId'],
        'deliveryIds': json['deliveryIds'] == null ? undefined : json['deliveryIds'],
        'pickupIds': json['pickupIds'] == null ? undefined : json['pickupIds'],
        'reportForWayToStop': WayReportFromJSON(json['reportForWayToStop']),
        'reportForStop': StopReportFromJSON(json['reportForStop']),
        'eventsOnWayToStop': ((json['eventsOnWayToStop'] as Array<any>).map(EventFromJSON)),
        'eventsAtStop': ((json['eventsAtStop'] as Array<any>).map(EventFromJSON)),
        'violationsOnWayToStop': ((json['violationsOnWayToStop'] as Array<any>).map(ViolationFromJSON)),
        'violationsAtStop': ((json['violationsAtStop'] as Array<any>).map(ViolationFromJSON)),
    };
}

  export function StopToJSON(json: any): Stop {
      return StopToJSONTyped(json, false);
  }

  export function StopToJSONTyped(value?: Omit<Stop, 'reportForWayToStop'|'reportForStop'|'eventsOnWayToStop'|'eventsAtStop'|'violationsOnWayToStop'|'violationsAtStop'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'locationId': value['locationId'],
        'tripId': value['tripId'],
        'deliveryIds': value['deliveryIds'],
        'pickupIds': value['pickupIds'],
    };
}

