/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MixedLoadingProhibition } from './MixedLoadingProhibition';
import {
    MixedLoadingProhibitionFromJSON,
    MixedLoadingProhibitionFromJSONTyped,
    MixedLoadingProhibitionToJSON,
    MixedLoadingProhibitionToJSONTyped,
} from './MixedLoadingProhibition';

/**
 * Planning restrictions that must hold for all routes.
 * @export
 * @interface PlanningRestrictions
 */
export interface PlanningRestrictions {
    /**
     * Restricts the number of trips per route to one.
     * 
     * See [here](./concepts/route-structure-control) for more information.
     * @type {boolean}
     * @memberof PlanningRestrictions
     */
    singleTripPerRoute?: boolean;
    /**
     * Restricts the number of different depot locations in the route of a vehicle to at most one. The vehicle start and end locations do not count here.
     * 
     * See [here](./concepts/route-structure-control) for more information.
     * @type {boolean}
     * @memberof PlanningRestrictions
     */
    singleDepotPerRoute?: boolean;
    /**
     * Defines restrictions regarding which load categories of transports are disallowed to be mixed on the same trip. 
     * @type {Array<MixedLoadingProhibition>}
     * @memberof PlanningRestrictions
     */
    mixedLoadingProhibitions?: Array<MixedLoadingProhibition>;
}

/**
 * Check if a given object implements the PlanningRestrictions interface.
 */
export function instanceOfPlanningRestrictions(value: object): value is PlanningRestrictions {
    return true;
}

export function PlanningRestrictionsFromJSON(json: any): PlanningRestrictions {
    return PlanningRestrictionsFromJSONTyped(json, false);
}

export function PlanningRestrictionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlanningRestrictions {
    if (json == null) {
        return json;
    }
    return {
        
        'singleTripPerRoute': json['singleTripPerRoute'] == null ? undefined : json['singleTripPerRoute'],
        'singleDepotPerRoute': json['singleDepotPerRoute'] == null ? undefined : json['singleDepotPerRoute'],
        'mixedLoadingProhibitions': json['mixedLoadingProhibitions'] == null ? undefined : ((json['mixedLoadingProhibitions'] as Array<any>).map(MixedLoadingProhibitionFromJSON)),
    };
}

  export function PlanningRestrictionsToJSON(json: any): PlanningRestrictions {
      return PlanningRestrictionsToJSONTyped(json, false);
  }

  export function PlanningRestrictionsToJSONTyped(value?: PlanningRestrictions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'singleTripPerRoute': value['singleTripPerRoute'],
        'singleDepotPerRoute': value['singleDepotPerRoute'],
        'mixedLoadingProhibitions': value['mixedLoadingProhibitions'] == null ? undefined : ((value['mixedLoadingProhibitions'] as Array<any>).map(MixedLoadingProhibitionToJSON)),
    };
}

