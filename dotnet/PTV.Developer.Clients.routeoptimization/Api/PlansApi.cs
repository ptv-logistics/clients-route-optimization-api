/*
 * Route Optimization
 *
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.routeoptimization.Client;
using PTV.Developer.Clients.routeoptimization.Model;

namespace PTV.Developer.Clients.routeoptimization.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlansApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new plan containing parts like vehicles and transports which should be used for a subsequent optimization. It persists and returns a slightly modified plan including a server generated ID that can be used for later retrieval. This returned plan can be used for automated route optimization via Operations API.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plan">The plan containing vehicles and transports. The returned plan in the response body is extended by a server generated ID and details of the calculated routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plan</returns>
        Plan CreatePlan(Plan plan, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new plan containing parts like vehicles and transports which should be used for a subsequent optimization. It persists and returns a slightly modified plan including a server generated ID that can be used for later retrieval. This returned plan can be used for automated route optimization via Operations API.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plan">The plan containing vehicles and transports. The returned plan in the response body is extended by a server generated ID and details of the calculated routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> CreatePlanWithHttpInfo(Plan plan, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a plan identified by the ID. Also cancels a currently running optimization of the plan.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plan to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePlan(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a plan identified by the ID. Also cancels a currently running optimization of the plan.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plan to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePlanWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a plan identified by the ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the requested plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plan</returns>
        Plan GetPlan(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a plan identified by the ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the requested plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> GetPlanWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of summaries for at most 1000 least recently updated available plans.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlanSummaries</returns>
        PlanSummaries GetPlanSummaries(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of summaries for at most 1000 least recently updated available plans.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlanSummaries</returns>
        ApiResponse<PlanSummaries> GetPlanSummariesWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlansApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new plan containing parts like vehicles and transports which should be used for a subsequent optimization. It persists and returns a slightly modified plan including a server generated ID that can be used for later retrieval. This returned plan can be used for automated route optimization via Operations API.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plan">The plan containing vehicles and transports. The returned plan in the response body is extended by a server generated ID and details of the calculated routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> CreatePlanAsync(Plan plan, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new plan containing parts like vehicles and transports which should be used for a subsequent optimization. It persists and returns a slightly modified plan including a server generated ID that can be used for later retrieval. This returned plan can be used for automated route optimization via Operations API.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plan">The plan containing vehicles and transports. The returned plan in the response body is extended by a server generated ID and details of the calculated routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> CreatePlanWithHttpInfoAsync(Plan plan, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a plan identified by the ID. Also cancels a currently running optimization of the plan.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plan to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePlanAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a plan identified by the ID. Also cancels a currently running optimization of the plan.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plan to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePlanWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a plan identified by the ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the requested plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> GetPlanAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a plan identified by the ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the requested plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> GetPlanWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of summaries for at most 1000 least recently updated available plans.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlanSummaries</returns>
        System.Threading.Tasks.Task<PlanSummaries> GetPlanSummariesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of summaries for at most 1000 least recently updated available plans.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlanSummaries)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlanSummaries>> GetPlanSummariesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlansApi : IPlansApiSync, IPlansApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlansApi : IPlansApi
    {
        private PTV.Developer.Clients.routeoptimization.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlansApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlansApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.routeoptimization.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.routeoptimization.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.routeoptimization.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.routeoptimization.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.routeoptimization.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.routeoptimization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlansApi(PTV.Developer.Clients.routeoptimization.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.routeoptimization.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.routeoptimization.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.routeoptimization.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.routeoptimization.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.routeoptimization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlansApi(PTV.Developer.Clients.routeoptimization.Client.ISynchronousClient client, PTV.Developer.Clients.routeoptimization.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.routeoptimization.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.routeoptimization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.routeoptimization.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.routeoptimization.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.routeoptimization.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.routeoptimization.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a new plan containing parts like vehicles and transports which should be used for a subsequent optimization. It persists and returns a slightly modified plan including a server generated ID that can be used for later retrieval. This returned plan can be used for automated route optimization via Operations API.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plan">The plan containing vehicles and transports. The returned plan in the response body is extended by a server generated ID and details of the calculated routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plan</returns>
        public Plan CreatePlan(Plan plan, int operationIndex = 0)
        {
            PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Plan> localVarResponse = CreatePlanWithHttpInfo(plan);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new plan containing parts like vehicles and transports which should be used for a subsequent optimization. It persists and returns a slightly modified plan including a server generated ID that can be used for later retrieval. This returned plan can be used for automated route optimization via Operations API.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plan">The plan containing vehicles and transports. The returned plan in the response body is extended by a server generated ID and details of the calculated routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plan</returns>
        public PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Plan> CreatePlanWithHttpInfo(Plan plan, int operationIndex = 0)
        {
            // verify the required parameter 'plan' is set
            if (plan == null)
            {
                throw new PTV.Developer.Clients.routeoptimization.Client.ApiException(400, "Missing required parameter 'plan' when calling PlansApi->CreatePlan");
            }

            PTV.Developer.Clients.routeoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = plan;

            localVarRequestOptions.Operation = "PlansApi.CreatePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Plan>("/plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new plan containing parts like vehicles and transports which should be used for a subsequent optimization. It persists and returns a slightly modified plan including a server generated ID that can be used for later retrieval. This returned plan can be used for automated route optimization via Operations API.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plan">The plan containing vehicles and transports. The returned plan in the response body is extended by a server generated ID and details of the calculated routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> CreatePlanAsync(Plan plan, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Plan> localVarResponse = await CreatePlanWithHttpInfoAsync(plan, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new plan containing parts like vehicles and transports which should be used for a subsequent optimization. It persists and returns a slightly modified plan including a server generated ID that can be used for later retrieval. This returned plan can be used for automated route optimization via Operations API.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plan">The plan containing vehicles and transports. The returned plan in the response body is extended by a server generated ID and details of the calculated routes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Plan>> CreatePlanWithHttpInfoAsync(Plan plan, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'plan' is set
            if (plan == null)
            {
                throw new PTV.Developer.Clients.routeoptimization.Client.ApiException(400, "Missing required parameter 'plan' when calling PlansApi->CreatePlan");
            }


            PTV.Developer.Clients.routeoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = plan;

            localVarRequestOptions.Operation = "PlansApi.CreatePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Plan>("/plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a plan identified by the ID. Also cancels a currently running optimization of the plan.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plan to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePlan(Guid id, int operationIndex = 0)
        {
            DeletePlanWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes a plan identified by the ID. Also cancels a currently running optimization of the plan.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plan to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Object> DeletePlanWithHttpInfo(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.routeoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.routeoptimization.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PlansApi.DeletePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/plans/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a plan identified by the ID. Also cancels a currently running optimization of the plan.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plan to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePlanAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeletePlanWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a plan identified by the ID. Also cancels a currently running optimization of the plan.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plan to be deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Object>> DeletePlanWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.routeoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.routeoptimization.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PlansApi.DeletePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/plans/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a plan identified by the ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the requested plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plan</returns>
        public Plan GetPlan(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Plan> localVarResponse = GetPlanWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a plan identified by the ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the requested plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plan</returns>
        public PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Plan> GetPlanWithHttpInfo(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.routeoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.routeoptimization.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PlansApi.GetPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Plan>("/plans/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a plan identified by the ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the requested plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> GetPlanAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Plan> localVarResponse = await GetPlanWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a plan identified by the ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the requested plan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.routeoptimization.Client.ApiResponse<Plan>> GetPlanWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.routeoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.routeoptimization.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PlansApi.GetPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Plan>("/plans/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a list of summaries for at most 1000 least recently updated available plans.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlanSummaries</returns>
        public PlanSummaries GetPlanSummaries(int operationIndex = 0)
        {
            PTV.Developer.Clients.routeoptimization.Client.ApiResponse<PlanSummaries> localVarResponse = GetPlanSummariesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a list of summaries for at most 1000 least recently updated available plans.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlanSummaries</returns>
        public PTV.Developer.Clients.routeoptimization.Client.ApiResponse<PlanSummaries> GetPlanSummariesWithHttpInfo(int operationIndex = 0)
        {
            PTV.Developer.Clients.routeoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PlansApi.GetPlanSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlanSummaries>("/plans/summaries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlanSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves a list of summaries for at most 1000 least recently updated available plans.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlanSummaries</returns>
        public async System.Threading.Tasks.Task<PlanSummaries> GetPlanSummariesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.routeoptimization.Client.ApiResponse<PlanSummaries> localVarResponse = await GetPlanSummariesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a list of summaries for at most 1000 least recently updated available plans.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.routeoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlanSummaries)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.routeoptimization.Client.ApiResponse<PlanSummaries>> GetPlanSummariesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.routeoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.routeoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.routeoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PlansApi.GetPlanSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlanSummaries>("/plans/summaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlanSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
