/*
 * Route Optimization
 *
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// Specifies a violation of a route.
    /// </summary>
    [DataContract(Name = "Violation")]
    public partial class Violation : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public ViolationType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Violation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Violation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Violation" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="timeExceedance">Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _PLANNING_HORIZON_, _ROUTE_START_INTERVAL_, _DRIVER_AVAILABILITY_, _OPENING_INTERVAL_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_DRIVING_TIME_OF_DRIVER_..</param>
        /// <param name="distanceExceedance">Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_..</param>
        /// <param name="numberOfStopsExceedance">Specifies a violation that involves a stop limit: Number of stops by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_..</param>
        /// <param name="capacityExceedance">Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation type: _VEHICLE_CAPACITY_..</param>
        /// <param name="missingEquipment">Specifies a violation for missing equipment (e.g. missing equipment of the used vehicle) that is required by the transports of the route. Is only filled for the following violation type: _VEHICLE_EQUIPMENT_..</param>
        /// <param name="mixedLoadingProhibitions">Is only filled for the following violation type: _MIXED_LOADING_PROHIBITION_..</param>
        public Violation(ViolationType type = default(ViolationType), int? timeExceedance = default(int?), int? distanceExceedance = default(int?), int? numberOfStopsExceedance = default(int?), List<int?> capacityExceedance = default(List<int?>), List<string> missingEquipment = default(List<string>), List<MixedLoadingProhibition> mixedLoadingProhibitions = default(List<MixedLoadingProhibition>))
        {
            this.Type = type;
            this.TimeExceedance = timeExceedance;
            this.DistanceExceedance = distanceExceedance;
            this.NumberOfStopsExceedance = numberOfStopsExceedance;
            this.CapacityExceedance = capacityExceedance;
            this.MissingEquipment = missingEquipment;
            this.MixedLoadingProhibitions = mixedLoadingProhibitions;
        }

        /// <summary>
        /// Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _PLANNING_HORIZON_, _ROUTE_START_INTERVAL_, _DRIVER_AVAILABILITY_, _OPENING_INTERVAL_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_DRIVING_TIME_OF_DRIVER_.
        /// </summary>
        /// <value>Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _PLANNING_HORIZON_, _ROUTE_START_INTERVAL_, _DRIVER_AVAILABILITY_, _OPENING_INTERVAL_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_DRIVING_TIME_OF_DRIVER_.</value>
        [DataMember(Name = "timeExceedance", EmitDefaultValue = true)]
        public int? TimeExceedance { get; set; }

        /// <summary>
        /// Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_.
        /// </summary>
        /// <value>Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_.</value>
        [DataMember(Name = "distanceExceedance", EmitDefaultValue = true)]
        public int? DistanceExceedance { get; set; }

        /// <summary>
        /// Specifies a violation that involves a stop limit: Number of stops by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_.
        /// </summary>
        /// <value>Specifies a violation that involves a stop limit: Number of stops by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_.</value>
        [DataMember(Name = "numberOfStopsExceedance", EmitDefaultValue = true)]
        public int? NumberOfStopsExceedance { get; set; }

        /// <summary>
        /// Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation type: _VEHICLE_CAPACITY_.
        /// </summary>
        /// <value>Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation type: _VEHICLE_CAPACITY_.</value>
        [DataMember(Name = "capacityExceedance", EmitDefaultValue = false)]
        public List<int?> CapacityExceedance { get; set; }

        /// <summary>
        /// Specifies a violation for missing equipment (e.g. missing equipment of the used vehicle) that is required by the transports of the route. Is only filled for the following violation type: _VEHICLE_EQUIPMENT_.
        /// </summary>
        /// <value>Specifies a violation for missing equipment (e.g. missing equipment of the used vehicle) that is required by the transports of the route. Is only filled for the following violation type: _VEHICLE_EQUIPMENT_.</value>
        [DataMember(Name = "missingEquipment", EmitDefaultValue = false)]
        public List<string> MissingEquipment { get; set; }

        /// <summary>
        /// Is only filled for the following violation type: _MIXED_LOADING_PROHIBITION_.
        /// </summary>
        /// <value>Is only filled for the following violation type: _MIXED_LOADING_PROHIBITION_.</value>
        [DataMember(Name = "mixedLoadingProhibitions", EmitDefaultValue = false)]
        public List<MixedLoadingProhibition> MixedLoadingProhibitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Violation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TimeExceedance: ").Append(TimeExceedance).Append("\n");
            sb.Append("  DistanceExceedance: ").Append(DistanceExceedance).Append("\n");
            sb.Append("  NumberOfStopsExceedance: ").Append(NumberOfStopsExceedance).Append("\n");
            sb.Append("  CapacityExceedance: ").Append(CapacityExceedance).Append("\n");
            sb.Append("  MissingEquipment: ").Append(MissingEquipment).Append("\n");
            sb.Append("  MixedLoadingProhibitions: ").Append(MixedLoadingProhibitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
