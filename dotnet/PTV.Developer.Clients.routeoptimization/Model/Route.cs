/*
 * Route Optimization
 *
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// A route contains a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop can be assigned to a trip. A route is subdivided into trips. Each route has at least one trip and a trip consists of at least two stops. At the beginning and end of each trip the vehicle does not carry any load. A trip starts at the vehicle start location or at a depot location, and ends at the vehicle end location or at a depot location.   See [here](./concepts/routes-and-trips) for more information.
    /// </summary>
    [DataContract(Name = "Route")]
    public partial class Route : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Route" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Route() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Route" /> class.
        /// </summary>
        /// <param name="vehicleId">The ID of the vehicle that is assigned to this route. A vehicle can be assigned to one route at most. (required).</param>
        /// <param name="stops">A sequence of stops along this route. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: deliveries before pickups. The sequence of deliveries and pickups is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either deliveries or pickups.  See [here](./concepts/locations-transports-and-stops) for more information. (required).</param>
        public Route(string vehicleId = default(string), List<Stop> stops = default(List<Stop>))
        {
            // to ensure "vehicleId" is required (not null)
            if (vehicleId == null)
            {
                throw new ArgumentNullException("vehicleId is a required property for Route and cannot be null");
            }
            this.VehicleId = vehicleId;
            // to ensure "stops" is required (not null)
            if (stops == null)
            {
                throw new ArgumentNullException("stops is a required property for Route and cannot be null");
            }
            this.Stops = stops;
        }

        /// <summary>
        /// The ID of the vehicle that is assigned to this route. A vehicle can be assigned to one route at most.
        /// </summary>
        /// <value>The ID of the vehicle that is assigned to this route. A vehicle can be assigned to one route at most.</value>
        [DataMember(Name = "vehicleId", IsRequired = true, EmitDefaultValue = true)]
        public string VehicleId { get; set; }

        /// <summary>
        /// A sequence of stops along this route. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: deliveries before pickups. The sequence of deliveries and pickups is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either deliveries or pickups.  See [here](./concepts/locations-transports-and-stops) for more information.
        /// </summary>
        /// <value>A sequence of stops along this route. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: deliveries before pickups. The sequence of deliveries and pickups is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either deliveries or pickups.  See [here](./concepts/locations-transports-and-stops) for more information.</value>
        [DataMember(Name = "stops", IsRequired = true, EmitDefaultValue = true)]
        public List<Stop> Stops { get; set; }

        /// <summary>
        /// Returns a summary of all events and all reports that belong to this route, including the start time and the end time of the route.
        /// </summary>
        /// <value>Returns a summary of all events and all reports that belong to this route, including the start time and the end time of the route.</value>
        [DataMember(Name = "report", IsRequired = true, EmitDefaultValue = true)]
        public RouteReport Report { get; private set; }

        /// <summary>
        /// Returns false as Report should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReport()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Route {\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  Stops: ").Append(Stops).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.VehicleId != null) {
                // VehicleId (string) pattern
                Regex regexVehicleId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
                if (!regexVehicleId.Match(this.VehicleId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleId, must match a pattern of " + regexVehicleId, new [] { "VehicleId" });
                }
            }

            yield break;
        }
    }

}
