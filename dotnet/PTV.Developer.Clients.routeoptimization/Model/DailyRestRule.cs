/*
 * Route Optimization
 *
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// Defines when a daily rest becomes necessary and how long it should be. Currently, each driver must have the same values specified.  See [here](./concepts/drivers-working-hours-break-and-rest-rules) for more information.
    /// </summary>
    [DataContract(Name = "DailyRestRule")]
    public partial class DailyRestRule : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DailyRestPosition
        /// </summary>
        [DataMember(Name = "dailyRestPosition", EmitDefaultValue = false)]
        public DailyRestPosition? DailyRestPosition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DailyRestRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DailyRestRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DailyRestRule" /> class.
        /// </summary>
        /// <param name="dailyRestTime">The minimum duration of a daily rest [s]. Minimum is 3 hours, maximum is 22 hours. (required).</param>
        /// <param name="maximumDrivingTimeBetweenDailyRests">Maximum duration that the driver is allowed to drive [s] before taking a daily rest. The maximum driving time is considered as infinite if it is not set..</param>
        /// <param name="maximumTravelTimeBetweenDailyRests">Maximum duration that the driver is allowed to travel [s] before taking a daily. The maximum travel time is considered as infinite if it is not set..</param>
        /// <param name="dailyRestPosition">dailyRestPosition.</param>
        public DailyRestRule(int? dailyRestTime = default(int?), int? maximumDrivingTimeBetweenDailyRests = default(int?), int? maximumTravelTimeBetweenDailyRests = default(int?), DailyRestPosition? dailyRestPosition = default(DailyRestPosition?))
        {
            // to ensure "dailyRestTime" is required (not null)
            if (dailyRestTime == null)
            {
                throw new ArgumentNullException("dailyRestTime is a required property for DailyRestRule and cannot be null");
            }
            this.DailyRestTime = dailyRestTime;
            this.MaximumDrivingTimeBetweenDailyRests = maximumDrivingTimeBetweenDailyRests;
            this.MaximumTravelTimeBetweenDailyRests = maximumTravelTimeBetweenDailyRests;
            this.DailyRestPosition = dailyRestPosition;
        }

        /// <summary>
        /// The minimum duration of a daily rest [s]. Minimum is 3 hours, maximum is 22 hours.
        /// </summary>
        /// <value>The minimum duration of a daily rest [s]. Minimum is 3 hours, maximum is 22 hours.</value>
        [DataMember(Name = "dailyRestTime", IsRequired = true, EmitDefaultValue = true)]
        public int? DailyRestTime { get; set; }

        /// <summary>
        /// Maximum duration that the driver is allowed to drive [s] before taking a daily rest. The maximum driving time is considered as infinite if it is not set.
        /// </summary>
        /// <value>Maximum duration that the driver is allowed to drive [s] before taking a daily rest. The maximum driving time is considered as infinite if it is not set.</value>
        [DataMember(Name = "maximumDrivingTimeBetweenDailyRests", EmitDefaultValue = true)]
        public int? MaximumDrivingTimeBetweenDailyRests { get; set; }

        /// <summary>
        /// Maximum duration that the driver is allowed to travel [s] before taking a daily. The maximum travel time is considered as infinite if it is not set.
        /// </summary>
        /// <value>Maximum duration that the driver is allowed to travel [s] before taking a daily. The maximum travel time is considered as infinite if it is not set.</value>
        [DataMember(Name = "maximumTravelTimeBetweenDailyRests", EmitDefaultValue = true)]
        public int? MaximumTravelTimeBetweenDailyRests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DailyRestRule {\n");
            sb.Append("  DailyRestTime: ").Append(DailyRestTime).Append("\n");
            sb.Append("  MaximumDrivingTimeBetweenDailyRests: ").Append(MaximumDrivingTimeBetweenDailyRests).Append("\n");
            sb.Append("  MaximumTravelTimeBetweenDailyRests: ").Append(MaximumTravelTimeBetweenDailyRests).Append("\n");
            sb.Append("  DailyRestPosition: ").Append(DailyRestPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DailyRestTime (int?) maximum
            if (this.DailyRestTime > (int?)79200)
            {
                yield return new ValidationResult("Invalid value for DailyRestTime, must be a value less than or equal to 79200.", new [] { "DailyRestTime" });
            }

            // DailyRestTime (int?) minimum
            if (this.DailyRestTime < (int?)10800)
            {
                yield return new ValidationResult("Invalid value for DailyRestTime, must be a value greater than or equal to 10800.", new [] { "DailyRestTime" });
            }

            // MaximumDrivingTimeBetweenDailyRests (int?) minimum
            if (this.MaximumDrivingTimeBetweenDailyRests < (int?)3600)
            {
                yield return new ValidationResult("Invalid value for MaximumDrivingTimeBetweenDailyRests, must be a value greater than or equal to 3600.", new [] { "MaximumDrivingTimeBetweenDailyRests" });
            }

            // MaximumTravelTimeBetweenDailyRests (int?) minimum
            if (this.MaximumTravelTimeBetweenDailyRests < (int?)3600)
            {
                yield return new ValidationResult("Invalid value for MaximumTravelTimeBetweenDailyRests, must be a value greater than or equal to 3600.", new [] { "MaximumTravelTimeBetweenDailyRests" });
            }

            yield break;
        }
    }

}
