/*
 * Route Optimization
 *
 * With the Route Optimization service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// A route report contains a summary of the values of all events and all reports that belong to this route, including the start time and the end time of the route.
    /// </summary>
    [DataContract(Name = "RouteReport")]
    public partial class RouteReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteReport" /> class.
        /// </summary>
        /// <param name="startTime">The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). (required).</param>
        /// <param name="endTime">The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). (required).</param>
        /// <param name="travelTime">The total travel time of the route [s]. Equals difference between end time and start time. (required).</param>
        /// <param name="distance">The total driving distance of the route [m]. (required).</param>
        /// <param name="drivingTime">The total driving time of the route [s]. (required).</param>
        /// <param name="serviceTime">The total service time of the route [s]. (required).</param>
        /// <param name="waitingTime">The total waiting time of the route [s]. (required).</param>
        /// <param name="breakTime">The total break time of the route [s]. (required).</param>
        /// <param name="restTime">The total rest time of the route [s]. (required).</param>
        public RouteReport(DateTimeOffset startTime = default(DateTimeOffset), DateTimeOffset endTime = default(DateTimeOffset), int? travelTime = default(int?), int? distance = default(int?), int? drivingTime = default(int?), int? serviceTime = default(int?), int? waitingTime = default(int?), int? breakTime = default(int?), int? restTime = default(int?))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            // to ensure "travelTime" is required (not null)
            if (travelTime == null)
            {
                throw new ArgumentNullException("travelTime is a required property for RouteReport and cannot be null");
            }
            this.TravelTime = travelTime;
            // to ensure "distance" is required (not null)
            if (distance == null)
            {
                throw new ArgumentNullException("distance is a required property for RouteReport and cannot be null");
            }
            this.Distance = distance;
            // to ensure "drivingTime" is required (not null)
            if (drivingTime == null)
            {
                throw new ArgumentNullException("drivingTime is a required property for RouteReport and cannot be null");
            }
            this.DrivingTime = drivingTime;
            // to ensure "serviceTime" is required (not null)
            if (serviceTime == null)
            {
                throw new ArgumentNullException("serviceTime is a required property for RouteReport and cannot be null");
            }
            this.ServiceTime = serviceTime;
            // to ensure "waitingTime" is required (not null)
            if (waitingTime == null)
            {
                throw new ArgumentNullException("waitingTime is a required property for RouteReport and cannot be null");
            }
            this.WaitingTime = waitingTime;
            // to ensure "breakTime" is required (not null)
            if (breakTime == null)
            {
                throw new ArgumentNullException("breakTime is a required property for RouteReport and cannot be null");
            }
            this.BreakTime = breakTime;
            // to ensure "restTime" is required (not null)
            if (restTime == null)
            {
                throw new ArgumentNullException("restTime is a required property for RouteReport and cannot be null");
            }
            this.RestTime = restTime;
        }

        /// <summary>
        /// The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        /// <value>The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).</value>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        /// <value>The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).</value>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        /// The total travel time of the route [s]. Equals difference between end time and start time.
        /// </summary>
        /// <value>The total travel time of the route [s]. Equals difference between end time and start time.</value>
        [DataMember(Name = "travelTime", IsRequired = true, EmitDefaultValue = true)]
        public int? TravelTime { get; set; }

        /// <summary>
        /// The total driving distance of the route [m].
        /// </summary>
        /// <value>The total driving distance of the route [m].</value>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public int? Distance { get; set; }

        /// <summary>
        /// The total driving time of the route [s].
        /// </summary>
        /// <value>The total driving time of the route [s].</value>
        [DataMember(Name = "drivingTime", IsRequired = true, EmitDefaultValue = true)]
        public int? DrivingTime { get; set; }

        /// <summary>
        /// The total service time of the route [s].
        /// </summary>
        /// <value>The total service time of the route [s].</value>
        [DataMember(Name = "serviceTime", IsRequired = true, EmitDefaultValue = true)]
        public int? ServiceTime { get; set; }

        /// <summary>
        /// The total waiting time of the route [s].
        /// </summary>
        /// <value>The total waiting time of the route [s].</value>
        [DataMember(Name = "waitingTime", IsRequired = true, EmitDefaultValue = true)]
        public int? WaitingTime { get; set; }

        /// <summary>
        /// The total break time of the route [s].
        /// </summary>
        /// <value>The total break time of the route [s].</value>
        [DataMember(Name = "breakTime", IsRequired = true, EmitDefaultValue = true)]
        public int? BreakTime { get; set; }

        /// <summary>
        /// The total rest time of the route [s].
        /// </summary>
        /// <value>The total rest time of the route [s].</value>
        [DataMember(Name = "restTime", IsRequired = true, EmitDefaultValue = true)]
        public int? RestTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteReport {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  TravelTime: ").Append(TravelTime).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  DrivingTime: ").Append(DrivingTime).Append("\n");
            sb.Append("  ServiceTime: ").Append(ServiceTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  BreakTime: ").Append(BreakTime).Append("\n");
            sb.Append("  RestTime: ").Append(RestTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
